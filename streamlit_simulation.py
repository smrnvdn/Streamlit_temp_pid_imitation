import streamlit as st
import numpy as np
import plotly.graph_objects as go
import pandas as pd
from io import BytesIO

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —à–∏—Ä–æ–∫–æ–≥–æ layout'–∞ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
st.set_page_config(layout="wide")

# –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
st.markdown("""
<style>
    .block-container {
        padding-top: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
TEMP_PARAMS = {
    'heat': {
        't_out': -5.8,  # –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–≥—Ä–µ–≤–∞
        'k': 0.3,       # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–≥—Ä–µ–≤–∞
        'T0': -13.0     # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞
    },
    'cool': {
        't_out': -9.0,  # –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        'k': 0.3,       # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        'T0': -5.8       # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
    }
}

# –ì—Ä–∞–Ω–∏—Ü—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
TEMP_LIMITS = {
    'min': -9,
    'max': -6
}

def generate_temp_array(params: dict, is_heating: bool = True, n_points: int = 100) -> np.ndarray:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    Args:
        params: —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        is_heating: True –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞, False –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        n_points: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
    """
    mode = 'heat' if is_heating else 'cool'
    params = params[mode]  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞

    t_out = params['t_out']
    t0 = params['T0']

    return np.array([
        t_out + np.exp(-params['k'] * i / 2) * (t0 - t_out)
        for i in range(n_points)
    ]).round(2)

# –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞ –∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
f_lst_heat = generate_temp_array(TEMP_PARAMS, is_heating=True)
f_lst_cool = generate_temp_array(TEMP_PARAMS, is_heating=False)

def control_temperature(current_temp: float = -7, n_iterations: int = 100, temp_min: float = -9, temp_max: float = -6) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    """
    temperature_history = [current_temp]  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    mode = 'heat'  # –†–µ–∂–∏–º –Ω–∞–≥—Ä–µ–≤–∞

    for _ in range(n_iterations - 1):  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        if mode == 'heat':
            if current_temp >= temp_max:
                mode = 'cool'
                continue

            mask = f_lst_heat > current_temp
            if not np.any(mask):
                break
            current_temp = f_lst_heat[mask][0]

        else:  # mode == 'cool'
            if current_temp <= temp_min:
                mode = 'heat'
                continue

            mask = f_lst_cool < current_temp
            if not np.any(mask):
                mode = 'heat'
                continue
            current_temp = f_lst_cool[mask][0]

        temperature_history.append(current_temp)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã

    return temperature_history

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å')

def to_excel():
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    df = pd.DataFrame({
        '–í—Ä–µ–º—è (–∏—Ç–µ—Ä–∞—Ü–∏–∏)': range(len(temperature_history)),
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': temperature_history,
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': [temp_max] * len(temperature_history),
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': [temp_min] * len(temperature_history)
    })

    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è Excel —Ñ–∞–π–ª–∞
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å', index=False)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç workbook –∏ worksheet
        workbook = writer.book
        worksheet = writer.sheets['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å']

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'top',
            'border': 1
        })

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)
            worksheet.set_column(col_num, col_num, 15)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤

    return buffer

# –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –æ–¥–Ω–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –¥—Ä—É–≥–∞—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
col_params, col_graph = st.columns([0.25, 0.75])
with col_params:
    st.markdown('##### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã')

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    n_iterations = st.slider(
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π',
        min_value=10,
        max_value=500,
        value=100,
        step=10,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è'
    )

    temp_min = st.slider(
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
        min_value=-13.0,
        max_value=-6.0,
        value=-9.0,
        step=0.1,
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'
    )

    temp_max = st.slider(
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
        min_value=-9.0,
        max_value=-5.8,
        value=-6.0,
        step=0.1,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'
    )

    current_temp = st.slider(
        '–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
        min_value=temp_min,
        max_value=temp_max,
        value=min(max(temp_min, -7.0), temp_max),
        step=0.1,
        help='–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã'
    )

    st.divider()

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        temp_params = {
            'heat': {
                't_out': st.number_input(
                    '–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–≥—Ä–µ–≤–∞ (¬∞C)',
                    min_value=-15.0,
                    max_value=0.0,
                    value=float(TEMP_PARAMS['heat']['t_out']),
                    step=0.1,
                    help='–ö–æ–Ω–µ—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–≥—Ä–µ–≤–∞',
                    key='t_out_heat_input'
                ),
                'k': st.number_input(
                    '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–≥—Ä–µ–≤–∞',
                    min_value=0.1,
                    max_value=1.0,
                    value=float(TEMP_PARAMS['heat']['k']),
                    step=0.1,
                    help='–°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–≥—Ä–µ–≤–∞',
                    key='k_heat_input'
                ),
                'T0': st.number_input(
                    '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–≥—Ä–µ–≤–∞ (¬∞C)',
                    min_value=-15.0,
                    max_value=0.0,
                    value=float(TEMP_PARAMS['heat']['T0']),
                    step=0.1,
                    help='–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞',
                    key='T0_heat_input'
                )
            },
            'cool': {
                't_out': st.number_input(
                    '–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (¬∞C)',
                    min_value=-15.0,
                    max_value=0.0,
                    value=float(TEMP_PARAMS['cool']['t_out']),
                    step=0.1,
                    help='–ö–æ–Ω–µ—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
                    key='t_out_cool_input'
                ),
                'k': st.number_input(
                    '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
                    min_value=0.1,
                    max_value=1.0,
                    value=float(TEMP_PARAMS['cool']['k']),
                    step=0.1,
                    help='–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
                    key='k_cool_input'
                ),
                'T0': st.number_input(
                    '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (¬∞C)',
                    min_value=-15.0,
                    max_value=0.0,
                    value=float(TEMP_PARAMS['cool']['T0']),
                    step=0.1,
                    help='–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è',
                    key='T0_cool_input'
                )
            }
        }

    st.divider()

# –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
f_lst_heat = generate_temp_array(temp_params, is_heating=True)
f_lst_cool = generate_temp_array(temp_params, is_heating=False)

# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
temperature_history = control_temperature(current_temp, n_iterations, temp_min, temp_max)

with col_params:
    # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if st.button('üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel'):
        st.download_button(
            label='üìä –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª',
            data=to_excel().getvalue(),
            file_name='temperature_control.xlsx',
            mime='application/vnd.ms-excel'
        )

    st.divider()

with col_graph:
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫–∞
    graph_height = st.slider(
        '–í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞',
        min_value=400,
        max_value=800,
        value=650,
        step=50,
        help='–ò–∑–º–µ–Ω–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞'
    )

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é Plotly
    fig = go.Figure()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    fig.add_trace(go.Scatter(
        x=list(range(len(temperature_history))),
        y=temperature_history,
        name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        line=dict(width=2)
    ))

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    fig.add_trace(go.Scatter(
        x=[0, len(temperature_history)],
        y=[temp_max, temp_max],
        name='–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        line=dict(dash='dash', color='red', width=2)
    ))

    fig.add_trace(go.Scatter(
        x=[0, len(temperature_history)],
        y=[temp_min, temp_min],
        name='–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        line=dict(dash='dash', color='blue', width=2)
    ))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞
    fig.update_layout(
        xaxis_title={
            'text': '–í—Ä–µ–º—è (–∏—Ç–µ—Ä–∞—Ü–∏–∏)',
            'font': dict(size=18)
        },
        yaxis_title={
            'text': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
            'font': dict(size=18)
        },
        showlegend=True,
        legend=dict(
            font=dict(size=16),
            yanchor="top",
            y=0.99,
            xanchor="right",
            x=1.15
        ),
        hovermode='x unified',
        height=graph_height,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞
        margin=dict(t=20, b=20, l=20, r=20)
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    st.plotly_chart(fig, use_container_width=True)